--[=====[
[[SND Metadata]]
author: 'Still Working On It'
version: 1.0.0
description: "Hopefully turning in Orange Gathering Scrips and serving as a Gathering Helper."
configs:
    ScripType:
        type: list
        description: "Are we gathering Purple scrips or Orange scrips?"
        choices: ["Purple", "Orange"]
        is_choice: true
    ItemToBuy:
        type: list
        description: "Do you wish to use (and turn in) items from the armory chest?"
        choices: ["Purple", "Orange"]
        is_choice: true
    UsePotion:
        type: list
        description: "Should we be using Spritbond Potions?"
		choices: ["None", "Spritbond Potion", "Spiritbond Potion <hq>", "Potent Spiritbond Potion", "Potent Spiritbond Potion <hq>", "Superior Spiritbond Potion", "Superior Spiritbond Potion <hq>"]
		ischoice: true
	UseSquadronManual:
		description: "Do you wish to use a Squadron Spiritbonding Manual?"
		default: false
	FoodToUse:
		description" "Food to use, if desired."
		default: None

[[End Metadata]]
--]=====]


--[[

********************************************************************************
*                   Gather Scrips (Solution Nine Patch 7.3)                    *
*                                Version 0.5.7                                 *
********************************************************************************

Created by: pot0to (https://ko-fi.com/pot0to)

Details go here. GBR can be configured to handle Cordials.

    -> 0.0.1 Attempting to rewrite this script to act as a gatherer helper.

********************************************************************************
*                               Required Plugins                               *
********************************************************************************

1. SND
2. Artisan
3. Vnavmesh
4. Optional: Lifestream, Teleporter (for hiding in inn)

--------------------------------------------------------------------------------------------------------------------------------------------------------------
]]

--#region Settings

--[[
********************************************************************************
*                                   Settings                                   *
********************************************************************************

]]

ScripColor                  = Config.Get("ScripType")
ItemToBuy                   = Config.Get("ItemToBuy")
HubCity                     = "Solution Nine"           --Options:Limsa/Gridania/Ul'dah/Solution Nine. Where to turn in the scrips and access retainer bell

Potion                      = Config.Get("UsePotion")     -- WARNING: This will overwrite any crafter's pots you have.

Retainers                   = true
GrandCompanyTurnIn          = true
MinInventoryFreeSlots       = 1

-- IMPORTANT: Your scrip exchange list may be different depending on whether
-- you've unlocked Skystell tools. Please make sure the menu item #s match what
-- you have in game.
ScripExchangeItems = {
    {
        itemName = "Condensed Solution",
        categoryMenu = 1,
        subcategoryMenu = 10,
        listIndex = 0,
        price = 125
    },
    {
        itemName = "Crafter's Competence Materia XII",
        categoryMenu = 2,
        subcategoryMenu = 2,
        listIndex = 0,
        price = 500
    },
    {
        itemName = "Crafter's Cunning Materia XII",
        categoryMenu = 2,
        subcategoryMenu = 2,
        listIndex = 1,
        price = 500
    },
    {
        itemName = "Crafter's Command Materia XII",
        categoryMenu = 2,
        subcategoryMenu = 2,
        listIndex = 2,
        price = 500
    },
    {
        itemName = "Crafter's Competence Materia XI",
        categoryMenu = 2,
        subcategoryMenu = 1,
        listIndex = 0,
        price = 250
    },
    {
        itemName = "Crafter's Cunning Materia XI",
        categoryMenu = 2,
        subcategoryMenu = 1,
        listIndex = 1,
        price = 250
    },
    {
        itemName = "Crafter's Command Materia XI",
        categoryMenu = 2,
        subcategoryMenu = 1,
        listIndex = 2,
        price = 250
    },
    {
        itemName = "Artful Afflatus Ring",
        categoryMenu = 0,
        subcategoryMenu = 10,
        listIndex = 24,
        price = 75,
        oneAtATime = true
    }
}

--#endregion Settings

--[[
********************************************************************************
*            Code: Don't touch this unless you know what you're doing          *
********************************************************************************
]]

OrangeCrafterScripId = 41784
PurpleCrafterScripId = 33913

HubCities =
{
    {
        zoneName="Limsa",
        zoneId = 129,
        aethernet = {
            aethernetZoneId = 129,
            aethernetName = "Hawkers' Alley",
            x=-213.61108, y=16.739136, z=51.80432
        },
        retainerBell = { x=-123.88806, y=17.990356, z=21.469421, requiresAethernet=false },
        scripExchange = { x=-258.52585, y=16.2, z=40.65883, requiresAethernet=true }
    },
    {
        zoneName="Gridania",
        zoneId = 132,
        aethernet = {
            aethernetZoneId = 133,
            aethernetName = "Leatherworkers' Guild & Shaded Bower",
            x=131.9447, y=4.714966, z=-29.800903
        },
        retainerBell = { x=168.72, y=15.5, z=-100.06, requiresAethernet=true },
        scripExchange = { x=142.15, y=13.74, z=-105.39, requiresAethernet=true },
    },
    {
        zoneName="Ul'dah",
        zoneId = 130,
        aethernet = {
            aethernetZoneId = 131,
            aethernetName = "Sapphire Avenue Exchange",
            x=101, y=9, z=-112
        },
        retainerBell = { x=171, y=15, z=-102, requiresAethernet=true },
        scripExchange = { x=142.68, y=13.75, z=-104.59, requiresAethernet=true },
    },
    {
        zoneName="Solution Nine",
        zoneId = 1186,
        aethernet = {
            aethernetZoneId = 1186,
            aethernetName = "Nexus Arcade",
            x=-161, y=-1, z=21
        },
        retainerBell = { x=-152.465, y=0.660, z=-13.557, requiresAethernet=true },
        scripExchange = { x=-158.019, y=0.922, z=-37.884, requiresAethernet=true }
    }
}

CharacterCondition =
{
    craftingMode = 5,
    casting=27,
    occupiedInQuestEvent=32,
    occupiedMateriaExtractionAndRepair=39,
    executingCraftingSkill = 40,
    craftingModeIdle = 41,
    betweenAreas=45,
    occupiedSummoningBell=50,
    beingMoved=70,
}

function TeleportTo(aetheryteName)
    yield("/tp "..aetheryteName)
    yield("/wait 1") -- wait for casting to begin
    while GetCharacterCondition(CharacterCondition.casting) do
        LogInfo("[FATE] Casting teleport...")
        yield("/wait 1")
    end
    yield("/wait 1") -- wait for that microsecond in between the cast finishing and the transition beginning
    while GetCharacterCondition(CharacterCondition.betweenAreas) do
        LogInfo("Teleporting...")
        yield("/wait 1")
    end
    yield("/wait 1")
end

function TurnIn()
    AtInn = false

    if GetItemCount(ItemId) == 0 or GetItemCount(CrafterScripId) >= 3800 then
        if IsAddonVisible("CollectablesShop") then
            yield("/callback CollectablesShop true -1")
        else
            State = CharacterState.ready
            LogInfo("State Change: Ready")
        end
    elseif not IsInZone(SelectedHubCity.zoneId) and
        (not SelectedHubCity.scripExchange.requiresAethernet or (SelectedHubCity.scripExchange.requiresAethernet and not IsInZone(SelectedHubCity.aethernet.aethernetZoneId)))
    then
        State = CharacterState.goToHubCity
        LogInfo("State Change: GoToHubCity")
    elseif SelectedHubCity.scripExchange.requiresAethernet and (not IsInZone(SelectedHubCity.aethernet.aethernetZoneId) or
        GetDistanceToPoint(SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z) > DistanceBetween(SelectedHubCity.aethernet.x, SelectedHubCity.aethernet.y, SelectedHubCity.aethernet.z, SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z) + 10) then
        if not LifestreamIsBusy() then
            LogInfo("[OrangeCrafters] /li "..SelectedHubCity.aethernet.aethernetName)
            yield("/li "..SelectedHubCity.aethernet.aethernetName)
        end
        yield("/wait 3")
    elseif IsAddonVisible("TelepotTown") then
        LogInfo("TelepotTown open")
        yield("/callback TelepotTown false -1")
    elseif GetDistanceToPoint(SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z) > 1 then
        if not (PathfindInProgress() or PathIsRunning()) then
            LogInfo("Path not running")
            PathfindAndMoveTo(SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z)
        end
    else
        if PathfindInProgress() or PathIsRunning() then
            yield("/vnav stop")
        end

        if not IsAddonVisible("CollectablesShop") then
            yield("/target Collectable Appraiser")
            yield("/wait 0.5")
            yield("/interact")
            yield("/wait 1")
        else
			if ScripColor == "Purple" then
                LogInfo("[OrangeCrafters] Selecting purple scrip item")
				yield("/callback CollectablesShop true 12 1")
                yield("/wait 0.5")
			end
            LogInfo("[OrangeCrafters] Turnin 15 0")
            yield("/callback CollectablesShop true 15 0")
            yield("/wait 1")
        end
    end
end

SelectTurnInPage = false
function ScripExchange()
    if GetItemCount(CrafterScripId) < SelectedItemToBuy.price or GetInventoryFreeSlotCount() <= MinInventoryFreeSlots then
        if IsAddonVisible("InclusionShop") then
            yield("/callback InclusionShop true -1")
        elseif GetItemCount(ItemId) > 0 and GetItemCount(CrafterScripId) < 3800 then
            SelectTurnInPage = false
            State = CharacterState.turnIn
            LogInfo("[OrangeCrafters] State Change: TurnIn")
        elseif GetInventoryFreeSlotCount() <= MinInventoryFreeSlots then
            SelectTurnInPage = false
            State = CharacterState.gcTurnIn
            LogInfo("[OrangeCrafters] State Change: GCTurnIn")
        else
            SelectTurnInPage = false
            State = CharacterState.ready
            LogInfo("[OrangeCrafters] State Change: Ready")
        end
    elseif not IsInZone(SelectedHubCity.zoneId) and
        (not SelectedHubCity.scripExchange.requiresAethernet or (SelectedHubCity.scripExchange.requiresAethernet and not IsInZone(SelectedHubCity.aethernet.aethernetZoneId)))
    then
        SelectTurnInPage = false
        State = CharacterState.goToHubCity
        LogInfo("State Change: GoToHubCity")
    elseif SelectedHubCity.scripExchange.requiresAethernet and (not IsInZone(SelectedHubCity.aethernet.aethernetZoneId) or
        GetDistanceToPoint(SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z) > DistanceBetween(SelectedHubCity.aethernet.x, SelectedHubCity.aethernet.y, SelectedHubCity.aethernet.z, SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z) + 10) then
        if not LifestreamIsBusy() then
            yield("/li "..SelectedHubCity.aethernet.aethernetName)
        end
        yield("/wait 3")
    elseif IsAddonVisible("TelepotTown") then
        yield("/callback TelepotTown true -1")
    elseif GetDistanceToPoint(SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z) > 1 then
        if not (PathfindInProgress() or PathIsRunning()) then
            LogInfo("[OrangeCrafters] Path not running")
            PathfindAndMoveTo(SelectedHubCity.scripExchange.x, SelectedHubCity.scripExchange.y, SelectedHubCity.scripExchange.z)
        end
    elseif IsAddonVisible("ShopExchangeItemDialog") then
        yield("/callback ShopExchangeItemDialog true 0")
        yield("/wait 1")
    elseif IsAddonVisible("SelectIconString") then
        yield("/callback SelectIconString true 0")
    elseif IsAddonVisible("InclusionShop") then
        LogInfo("[OrangeCrafters] Free inventory slots: "..GetInventoryFreeSlotCount())

        if not SelectTurnInPage then
            yield("/callback InclusionShop true 12 "..SelectedItemToBuy.categoryMenu)
            yield("/wait 1")
            yield("/callback InclusionShop true 13 "..SelectedItemToBuy.subcategoryMenu)
            yield("/wait 1")
            SelectTurnInPage = true
        end
        local qty = 1
        if not SelectedItemToBuy.oneAtATime then
            qty = math.min(GetItemCount(CrafterScripId)//SelectedItemToBuy.price, 99)
        end
        yield("/pcall InclusionShop true 14 "..SelectedItemToBuy.listIndex.." "..qty)
        yield("/wait 1")
    else
        yield("/wait 1")
        yield("/target Scrip Exchange")
        yield("/wait 0.5")
        yield("/interact")
    end
end

function ProcessRetainers()
    CurrentFate = nil
    
    LogInfo("[OrangeCrafters] Handling retainers...")
    if not LogInfo("[OrangeCrafters] check retainers ready") and not ARRetainersWaitingToBeProcessed() or GetInventoryFreeSlotCount() <= 1 then
        if IsAddonVisible("RetainerList") then
            yield("/callback RetainerList true -1")
        elseif not GetCharacterCondition(CharacterCondition.occupiedSummoningBell) then
            State = CharacterState.ready
            LogInfo("[FATE] State Change: Ready")
        end
    else
        yield("/target Summoning Bell")
        yield("/wait 1")

        if GetTargetName() == "Summoning Bell" then
            if GetDistanceToTarget() > 5 then
                if not PathIsRunning() and not PathfindInProgress() then
                    PathfindAndMoveTo(GetTargetRawXPos(), GetTargetRawYPos(), GetTargetRawZPos())
                end
            else
                if PathIsRunning() or PathfindInProgress() then
                    yield("/vnav stop")
                end
                if not GetCharacterCondition(CharacterCondition.occupiedSummoningBell) then
                    yield("/interact")
                elseif IsAddonVisible("RetainerList") then
                    yield("/ays e")
                    if Echo == "All" then
                        yield("/echo [OrangeCrafters] Processing retainers")
                    end
                    yield("/wait 1")
                end
            end
        elseif not LogInfo("[OrangeCrafters] is in hub city zone?") and not IsInZone(SelectedHubCity.zoneId) and
            (not SelectedHubCity.scripExchange.requiresAethernet or (SelectedHubCity.scripExchange.requiresAethernet and not IsInZone(SelectedHubCity.aethernet.aethernetZoneId)))
        then
            TeleportTo(SelectedHubCity.aetheryte)
        elseif not LogInfo("[OrangeCrafters] use aethernet?") and
            SelectedHubCity.retainerBell.requiresAethernet and not LogInfo("abc") and (not IsInZone(SelectedHubCity.aethernet.aethernetZoneId) or
            (GetDistanceToPoint(SelectedHubCity.retainerBell.x, SelectedHubCity.retainerBell.y, SelectedHubCity.retainerBell.z) > (DistanceBetween(SelectedHubCity.aethernet.x, SelectedHubCity.aethernet.y, SelectedHubCity.aethernet.z, SelectedHubCity.retainerBell.x, SelectedHubCity.retainerBell.y, SelectedHubCity.retainerBell.z) + 10)))
        then
            if not LifestreamIsBusy() then
                yield("/li "..SelectedHubCity.aethernet.aethernetName)
            end
            yield("/wait 3")
        elseif not LogInfo("[OrangeCrafters] close telepot town") and IsAddonVisible("TelepotTown") then
            LogInfo("TelepotTown open")
            yield("/callback TelepotTown false -1")
        elseif not LogInfo("[OrangeCrafters] move to summoning bell") and GetDistanceToPoint(SelectedHubCity.retainerBell.x, SelectedHubCity.retainerBell.y, SelectedHubCity.retainerBell.z) > 1 then
            if not (PathfindInProgress() or PathIsRunning()) then
                LogInfo("Path not running")
                PathfindAndMoveTo(SelectedHubCity.retainerBell.x, SelectedHubCity.retainerBell.y, SelectedHubCity.retainerBell.z)
            end
        elseif PathfindInProgress() or PathIsRunning() then
            return
        elseif not HasTarget() or GetTargetName() ~= "Summoning Bell" then
            yield("/target Summoning Bell")
            return
        elseif not GetCharacterCondition(CharacterCondition.occupiedSummoningBell) then
            yield("/interact")
        elseif IsAddonVisible("RetainerList") then
            yield("/ays e")
            if Echo == "All" then
                yield("/echo [FATE] Processing retainers")
            end
            yield("/wait 1")
        end
    end
end

function PotionCheck()
    --pot usage
    if not HasStatusId(49) and Potion ~= "" then
        yield("/item " .. Potion)
    end
end

function Ready()
    PotionCheck()

    if not IsPlayerAvailable() then
        -- do nothing
    elseif Retainers and ARRetainersWaitingToBeProcessed() and GetInventoryFreeSlotCount() > 1 then
        State = CharacterState.processRetainers
        LogInfo("[OrangeCrafters] State Change: ProcessingRetainers")
    elseif GetItemCount(CrafterScripId) >= 3800 then
        State = CharacterState.scripExchange
        LogInfo("[OrangeCrafters] State Change: ScripExchange")
    elseif GetInventoryFreeSlotCount() <= MinInventoryFreeSlots and GetItemCount(ItemId) > 0 then
        State = CharacterState.turnIn
        LogInfo("State Change: TurnIn")
    elseif not LogInfo("[OrangeCrafters] Ready -> GC TurnIn") and GrandCompanyTurnIn and
        GetInventoryFreeSlotCount() <= MinInventoryFreeSlots
    then
        State = CharacterState.gcTurnIn
        LogInfo("[OrangeCrafters] State Change: GCTurnIn")
    else
        State = CharacterState.crafting
        LogInfo("[OrangeCrafters] State Change: Crafting")
    end
end

CharacterState =
{
    ready = Ready,
    gathering = Gathering,
    goToHubCity = GoToHubCity,
    turnIn = TurnIn,
    scripExchange = ScripExchange,
    processRetainers = ProcessRetainers,
}

StopFlag = false

RequiredPlugins = {
    "Artisan",
    "vnavmesh"
}
-- add optional plugins
if HomeCommand ~= "" then
    table.insert(RequiredPlugins, "Lifestream")
    table.insert(RequiredPlugins, "TeleporterPlugin")
end
if Retainers then
    table.insert(RequiredPlugins, "AutoRetainer")
end
if GrandCompanyTurnIn then
    table.insert(RequiredPlugins, "Deliveroo")
end

for _, plugin in ipairs(RequiredPlugins) do
    if not HasPlugin(plugin) then
        yield("/e Missing required plugin: "..plugin.."! Stopping script. Please install the required plugin and try again.")
        StopFlag = true
    end
end

yield("/at y")
State = CharacterState.ready
local classId = 0
for _, class in pairs(ClassList) do
    if CrafterClass == class.className then
        classId = class.classId
    end
end
if classId == 0 then
    yield("/echo Could not find crafter class: "..CrafterClass)
    yield("/snd stop")
end

if ScripColor == "Orange" then
    CrafterScripId = OrangeCrafterScripId
    ScripRecipes = OrangeScripRecipes
elseif ScripColor == "Purple" then
    CrafterScripId = PurpleCrafterScripId
    ScripRecipes = PurpleScripRecipes
else
    yield("/echo Cannot recognize crafter scrip color: "..ScripColor)
    yield("/snd stop")
end
ItemId = 0
RecipeId = 0
for _, data in ipairs(ScripRecipes) do
    if data.classId == classId then
        ItemId = data.itemId
        RecipeId = data.recipeId
    end
end

for _, item in ipairs(ScripExchangeItems) do
    if item.itemName == ItemToBuy then
        SelectedItemToBuy = item
    end
end
if SelectedItemToBuy == nil then
    yield("/echo Could not find "..ItemToBuy.." on the list of scrip exchange items.")
    StopFlag = true
end

for _, city in ipairs(HubCities) do
    if city.zoneName == HubCity then
        SelectedHubCity = city
        SelectedHubCity.aetheryte = GetAetheryteName(GetAetherytesInZone(city.zoneId)[0])
    end
end
if SelectedHubCity == nil then
    yield("/echo Could not find hub city: "..HubCity)
    yield("/vnav stop")
end

AtInn = false
ArtisanTimeoutStartTime = 0
LogInfo("[OrangeCrafters] Start")
while not StopFlag do
    if not (
        IsPlayerCasting() or
        GetCharacterCondition(CharacterCondition.betweenAreas) or
        GetCharacterCondition(CharacterCondition.beingMoved) or
        GetCharacterCondition(CharacterCondition.occupiedMateriaExtractionAndRepair) or
        LifestreamIsBusy())
    then
        State()
    end
    yield("/wait 0.1")
end
